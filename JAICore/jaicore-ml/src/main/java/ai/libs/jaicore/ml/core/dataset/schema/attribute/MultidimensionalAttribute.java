package ai.libs.jaicore.ml.core.dataset.schema.attribute;

import java.util.Arrays;

import org.api4.java.ai.ml.core.dataset.schema.attribute.IAttribute;
import org.api4.java.ai.ml.core.dataset.schema.attribute.IAttributeValue;
import org.nd4j.nativeblas.Nd4jCpu.double_absolute_difference_loss;

/**
 * Attribute for 2dDouble Arrays
 *
 * @author Lukas
 *
 */
public class MultidimensionalAttribute implements IAttribute {// FIXME what should we extend here?{
	private static final long serialVersionUID = 1L;

	private final char INPUTSTRING_INNER_SPLITTER = ' ';
	private final char ARRAY_STRING_SPLITTER = ',';
	private final String INNTER_ARRAY_SPLITTERString = "\\],\\[";

	private int xsize;
	private int ysize;
	private String name;

	public int getXsize() {
		return this.xsize;
	}

	public int getYsize() {
		return this.ysize;
	}

	@Override
	public String getName() {
		return this.name;
	}

	/**
	 * Attribute Constructor
	 *
	 * @param name attribute name
	 * @param xsize xsize of AttributeValues generated by this Attribute
	 * @param ysize ysize of AttributeValues generated by this Attribute
	 */
	public MultidimensionalAttribute(final String name, final int xsize, final int ysize) {
		this.name = name;
		this.xsize = xsize;
		this.ysize = ysize;
	}

	@Override
	public int hashCode() {
		return super.hashCode();
	}

	@Override
	public boolean equals(final Object obj) {
		if (obj instanceof MultidimensionalAttribute) {
			MultidimensionalAttribute compAttribute = (MultidimensionalAttribute) obj;
			return (this.xsize == compAttribute.getXsize() && this.ysize == compAttribute.getYsize() && this.name == compAttribute.getName());
		}
		throw new IllegalArgumentException("the given argument does not have the type MultidimensionalAttribute");
	}

	/**
	 * {@inheritDoc} takes object ob type double[][] or MultidimensionalAttributeValue - parsed to MultidimensionalAttributeValue
	 */
	@Override
	public IAttributeValue getAsAttributeValue(final Object object) {
		if (this.isValidValue(object)) {
			if (object instanceof double[][]) {
				return new MultidimensionalAttributeValue(this, (double[][]) object);
			} else if (object instanceof MultidimensionalAttributeValue) {
				return new MultidimensionalAttributeValue(this, ((MultidimensionalAttributeValue) object).getValue());
			}
		}
		throw new IllegalArgumentException("No valid value for this attribute");

	}

	@Override
	public boolean isValidValue(final Object value) {
		return (value instanceof MultidimensionalAttributeValue || value instanceof double_absolute_difference_loss[][]);
	}

	@Override
	public String getStringDescriptionOfDomain() {
		return "[MDA] " + this.getName(); // copied from SensorTimeSeries
	}

	@Override
	public double toDouble(final Object object) {
		throw new UnsupportedOperationException("Not yet implemented in MultidimensionalAttribute");
	}

	/**
	 * {@inheritDoc} takes object of type MultidimensionalAttributeValue - parses it to [[a b] [c d] [e f]]
	 */
	@Override
	public String serializeAttributeValue(final Object value) {
		MultidimensionalAttributeValue mlav = (MultidimensionalAttributeValue) value;
		String serialisedString = Arrays.deepToString(mlav.getValue());
		return serialisedString.replace(this.ARRAY_STRING_SPLITTER, this.INPUTSTRING_INNER_SPLITTER).replace("  ", " ");
	}

	/**
	 * {@inheritDoc} parses String string to MutidimensionalAttributeValue
	 */
	@Override
	public MultidimensionalAttributeValue deserializeAttributeValue(final String string) {
		String arraystring = string.replace(this.INPUTSTRING_INNER_SPLITTER, this.ARRAY_STRING_SPLITTER);
		String[] test = arraystring.split(this.INNTER_ARRAY_SPLITTERString);
		test[0] = test[0].substring(2);
		test[test.length - 1] = test[test.length - 1].substring(0, test[test.length - 1].length() - 2);
		double[][] values = new double[this.xsize][this.ysize];
		for (int i = 0; i < test.length; i++) {
			String[] tmp = test[i].split(",");
			for (int j = 0; j < tmp.length; j++) {
				values[i][j] = Double.parseDouble(tmp[j]);
			}
		}
		return new MultidimensionalAttributeValue(this, values);
	}

	/*
	@Override
	public double encodeValue(final Object attributeValue) {
		throw new UnsupportedOperationException("Not yet implemented in MultidimensionalAttribute");
	}
	
	@Override
	public Object decodeValue(final double encodedAttributeValue) {
		throw new UnsupportedOperationException("Not yet implemented in MultidimensionalAttribute");
	}*/

}
